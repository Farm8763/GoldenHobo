Install
sudo pacman -S git

Setup
$ git config --global user.name "Firstname Lastname"
$ git config --global user.email "your_email@youremail.com"

Basic Usage

Cloning a repository
git clone https://github.com/Farm8763/GoldenHobo.git

will clone a Git repository in a new directory inside your current 


Committing files
Git's commit process involves two steps:
Add new files, add changes for existing files (both with git add <files>), and/or remove files (with git rm). These changes are put in a staging area called the index.

Call git commit to commit the changes.
Git commit will open up a text editor to provide a commit message. You can set this editor to whatever you want by changing the core.editor option with git config.

Alternatively, you can use git commit -m <message> to supply the commit message without opening the text editor.
Other useful commit tricks:
git commit -a lets you commit changes you have made to files already under Git control without having to take the step of adding the changes to the index. You still have to add new files with git add.
git add -p lets you commit specific parts of files you have changed. This is useful if you have made a bunch of changes that you think would be best split into several commits.


Pushing your changes
To push your changes up to a server (such as Github), use
git push https://github.com/Farm8763/GoldenHobo.git


Pulling from the server
If you are working on multiple machines and want to update your local repository to what the server has, you use
git pull https://github.com/Farm8763/GoldenHobo.git

Similarly to push, the server name and branch should have sane defaults, so git pull should suffice. Git pull is actually shorthand for doing two things:
Calling git fetch, which updates the local copy of what the server has. Such branches are called "remote" branches because they are mirroring remote servers.
Calling git merge, which merges what the remote branch has with what you have. If your commit history is the same as the server's commit history, you will be automatically fast-forwarded to the latest commit on the server. If your history does not match (maybe someone else has pushed commits since you last synced), the two histories will be merged.
It is not a bad idea to get into the practice of using these two commands instead of git pull. This way you can check to make sure that the server contains what you would expect before merging.
